@model BookingHotels.Web.Models.RoomViewModel
@{
    ViewBag.Title = "Edit room";
    // Images Srcs from Web API
    var imgSrcs = ViewBag.imgSrcs;
    // ErrorMessage from temp data
    var ErrorMessage = ViewBag.ErrorMessage;
}

<h2>@ViewBag.Title</h2>
<hr/>
@* Details about room being edited *@
<div class="row">
    <div class="col-md-5">
        <div class="row">
            <h2>You are editing this room:</h2>
        </div>
        <div class="row">
            @Html.ActionLink(
linkText: "Id: " + Model.Id,
actionName: "Details",
controllerName: "Room",
routeValues: new
{
    id = Model.Id,
},
htmlAttributes: null)
        </div>
        <div class="row">
            RoomType: @Model.RoomType
        </div>
        <div class="row">
            @Html.ActionLink(
                linkText: "Hotel: " + Model.HotelId.ToString(),
                actionName: "Details",
                controllerName: "Hotel",
                routeValues: new
                {
                    id = Model.HotelId,
                },
                htmlAttributes: null)
        </div>
    </div>
    <div class="col-md-7">
        <div class="row">
            <h2>Existing images for this room:</h2>
        </div>
        <div class="row">
        @{ if (imgSrcs != null)
            {
                foreach (string imgsrc in imgSrcs)
                {
                    <img src="@imgsrc" width="50" height="50" />
                }
            }
        }
        </div>
    </div>
</div>
<hr />

<div class="row text-center"><h4>Upload an image for this room:</h4></div>
@* Main files input (not included in the form): *@
@Html.TextBoxFor(m => m.Images, new { type = "file", multiple = "multiple", value = "", id = "browse", name = "files" })
@*Form*@
@using (Html.BeginForm("UploadRoomImage", "Room", null, FormMethod.Post, new { id = "uploadForm", enctype = "multipart/form-data" }))
{
<div class="row">
        @Html.HiddenFor(model => model.Id)
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-12">
            <div class="row">
                @* Preview images *@
                <div id="container" class="row"></div>
            </div>
        </div>
</div>
<br>
<div class="row">
    <div class="col-md-12">
        <div class="row">
            Upload preview (<span id="totalCount">0</span>&nbsp;files):
        </div>
        <div class="row">
            <output id="listNames"></output>
        </div>
        <div class="row">
            <output id="listImages"></output>
        </div>
        <div class="row">
            <a href="#" id="remove">clear</a>
        </div>
    </div>
</div>
<br>
<div class="row">
    <div class="col-md-12">
        <input type="submit" id="submitBtn" value="Upload" class="btn btn-default" />
    </div>
</div>
}

<div class="row text-center">
    <p class="text-danger">@ErrorMessage</p>
</div>

<script type="text/javascript">
    $(document).ready(function () {
    // Prevent multiple submits when clicking submit button twice
        $("#uploadForm").submit(function () {
            $("#submitBtn").attr("disabled", true);
            return true;
        });
    });
    // Array of files read from FileReader
    var queue = [];
    // Append hidden inputs in the form every time new file selected in the main input
    $(':file').change(function () {
        if (this.files.length > 0) {
            var real = $(this);
            var cloned = real.clone(true);
            real.hide();
            cloned.insertAfter(real);
            real.appendTo('form');
        }
        event.stopPropagation();
        event.preventDefault();
        // Files is a FileList of File objects
        var dataTransfer = event.dataTransfer;
        var target = event.target;
        if (dataTransfer != null)
            var files = dataTransfer.files;
        else
            var files = target.files;
        for (var i = 0, f; f = files[i]; i++) {
            // Only process image files
            if (!f.type.match('image.*')) {
                continue;
            }
            var reader = new FileReader();
            // Capture file information
            reader.fileName = f.name;
            reader.fileSize = f.size;
            reader.addEventListener("load", function (event) {
                var theFile = event.target;
                var imageInfo = document.createElement('span');
                // Write image and info
                imageInfo.innerHTML = ['<div class="col-md-2">',
                                        '<img class="thumb" src="', theFile.result, '" title="', escape(theFile.name), '"/>',
                                        '<p>' + escape(theFile.fileName) + ' - ' + theFile.fileSize + ' bytes</p>',
                                        '</div>'].join('');
                document.getElementById('listImages').insertBefore(imageInfo, null);
                queue.push(theFile.result);
                console.log('pushed to queue ' + theFile.fileName);
            });
            reader.readAsDataURL(f);
        }
        console.log(queue);
        $('#totalCount').text(queue.length+1);
    });

    $('#remove').click(function () {
        clearValues()
    });
</script>








