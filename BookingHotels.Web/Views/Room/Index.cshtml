@model IEnumerable<BookingHotels.Web.Models.RoomViewModel>
@{
    ViewBag.Title = "Rooms";
}
@* Content *@
<div class="col-sm-9">
    <h2>@ViewBag.Title</h2>

    @*Output rooms with knockout:*@
    <p> We have 
        <span data-bind="text: okrooms().length"></span>
        rooms </p>
    <table>
        <tbody data-bind="template: { name: 'okroomsRowTemplate', foreach: okrooms }"></tbody>
    </table>

    <script type="text/html" id="okroomsRowTemplate">
        <tr>
            <td>HotelId: <input data-bind="value: HotelId" /></td>
            <td>RoomId: <input data-bind="value: RoomId"/></td>
            <td>RoomPrice:<input data-bind="value: RoomPrice"/></td>
            <td>RoomType:<input data-bind="value: RoomType" /></td>
            <td>RoomType:<input data-bind="value: RoomType"/></td>
        </tr>
    </script>

    @*The same output with razor:*@
    @foreach (var item in Model)
    {
        @Html.DisplayFor(m => item, "RoomTemplate")
    }
</div>

@* Sidebar *@
<div class="col-sm-3 text-center">
    <h2>Filters</h2>
    <div class="row">
        <div class="col-sm-5">
            Start Date
        </div>
        <div class="col-sm-7">
            <input type = "date" class="input-sm, datefield, form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-5">
            End Date
        </div>
        <div class="col-sm-7">
            <input type="date" class="input-sm, datefield, form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-5">
            Max room price
        </div>
        <div class="col-sm-7">
            <input class="input-sm" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-5">
            Hotel
        </div>
        <div class="col-sm-7">
            <input class="input-sm" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm-5">
            Room type
        </div>
        <div class="col-sm-7">
            <input class="input-sm" />
        </div>
    </div>

    <hr/>
    <button class="btn-primary">Apply</button>
</div>

<script>
    // Using Json.NET to JSON encode server-side Model directly in view
    var JsonRooms = JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(
                                 Newtonsoft.Json.JsonConvert.SerializeObject(
                                 Model,
                                 Newtonsoft.Json.Formatting.None,
                                 new Newtonsoft.Json.JsonSerializerSettings {
                                     ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore })))");

    console.log(JsonRooms);

        var viewModel = {
            okrooms: ko.observableArray(JsonRooms)
        };

        ko.applyBindings(viewModel, document.body);
</script>