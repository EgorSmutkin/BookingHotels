@model IEnumerable<BookingHotels.Web.Models.RoomViewModel>
@{
ViewBag.Title = "Rooms";
}
@* Content *@
<div class="col-sm-9">
    <h2>@ViewBag.Title</h2>
    <h3> We have
        <span data-bind="text: koRooms().length"></span>
        rooms:
    </h3>
    <hr/>
    @* Knockout template: *@
    <div data-bind="template: { name: 'koRoomDisplayTemplate', foreach: koRoomsFiltered }"></div>

    <script type="text/html" id="koRoomDisplayTemplate">
        <div class="card col-md-3 text-center">
            <img class="card-img-top" src="/Content/Images/room.png" width="100" height="100">
            <h4 class="card-title">
                <span data-bind="text: RoomType"></span>
            </h4>
            <p class="card-text">
                This room is in
                <a href="#" data-bind="click: $parent.hotelDetails">
                    <span data-bind="text: Hotel.HotelName"></span>
                </a>
            </p>
            <a href="#" data-bind="click: $parent.details">
                <span class="btn btn-primary" data-bind="text: $parent.bookThisRoom(RoomPrice)"></span>
            </a>
        </div>
    </script>
</div>

@* Sidebar *@
<div class="col-sm-3 text-center">
     <h2>Filters</h2>
     <div class="row">
         <div class="col-sm-5">
             Start Date
         </div>
         <div class="col-sm-7">
             <input type="date" class="input-sm, datefield, form-control" />
         </div>
     </div>
     <div class="row">
         <div class="col-sm-5">
             End Date
         </div>
         <div class="col-sm-7">
             <input type="date" class="input-sm, datefield, form-control" />
         </div>
     </div>
     <div class="row">
         <div class="col-sm-5">
             Max room price
         </div>
         <div class="col-sm-7">
             <input class="input-sm" />
         </div>
     </div>
     <div class="row">
         <div class="col-sm-5">
             Hotel
         </div>
         <div class="col-sm-7">
             <input class="input-sm" />
         </div>
     </div>
     <div class="row">
         <div class="col-sm-5">
             Room type
         </div>
         <div class="col-sm-7">
             <select 
                 class="selectpicker"
                 data-selected-text-format="count > 3"
                 multiple
                 data-bind="selectedOptions: selectedRoomTypes, options: koRoomTypes">
             </select>
         </div>
     </div>

     <hr />
     <button class="btn-primary">Apply</button>
 </div>

<script type="text/javascript">
    // Using Json.NET to JSON encode server-side Model directly in view
    var JsonRooms = JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(
    Newtonsoft.Json.JsonConvert.SerializeObject(
    Model,
    Newtonsoft.Json.Formatting.None,
    new Newtonsoft.Json.JsonSerializerSettings {
    ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore }
    )))");

    var RoomTypes =JSON.parse("@Html.Raw(HttpUtility.JavaScriptStringEncode(
    Newtonsoft.Json.JsonConvert.SerializeObject(
    Enum.GetNames(typeof(BookingHotels.Domain.Enums.RoomType))
    )))");
    console.log(RoomTypes);

    @* Knockout View Model *@
    var koRoomViewModel =
    {
        koRooms: ko.observableArray(JsonRooms),
        koRoomTypes: ko.observableArray(RoomTypes),
        selectedRoomTypes: ko.observableArray([]),
        // Knockout supplies the current model value as the first parameter
        details : function (room) {
            window.location.href = "/room/details/" + room.Id;
        },
        hotelDetails : function (room) {
            window.location.href = "/hotel/details/" + room.HotelId;
        },
        bookThisRoom : function (price) {
            return "Book for " + price + " $";
        }
    };

    koRoomViewModel.koRoomsFiltered = ko.dependentObservable(function () {
        //Only filter if one or more countries selected
        if (koRoomViewModel.selectedRoomTypes().length) {
            return ko.utils.arrayFilter(koRoomViewModel.koRooms(), function (room) {
                //Return true (to include room) if it's RoomType appears in selectedRoomTypes
                return (-1 != ko.utils.arrayIndexOf(koRoomViewModel.selectedRoomTypes(), room.RoomType));
            });
        }
        //Otherwise return all people if no RoomType selected
        return koRoomViewModel.koRooms;
    });

    ko.applyBindings(koRoomViewModel);
</script>